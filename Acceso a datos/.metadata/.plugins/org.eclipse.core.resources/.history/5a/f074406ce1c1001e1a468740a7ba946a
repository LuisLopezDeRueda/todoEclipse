package ceu.ad.tema4.ejercicio2.service;

import org.hibernate.Session;
import org.hibernate.query.NativeQuery;

import ceu.ad.tema4.ejercicio2.modelo.*;
import jakarta.persistence.NoResultException;

public class PedidosClientesServiceImpl implements PedidosClientesService {

	@Override
	public void crearCliente(Cliente cliente) throws PedidosClientesServiceException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactoy().openSession();
			session.getTransaction().begin();
			session.persist(cliente);
			session.getTransaction().commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			throw new PedidosClientesServiceException(e);
		} finally {

		}
	}

	@Override
	public Pedido crearPedido(Pedido pedido) throws PedidosClientesServiceException {
		Session session = null;
		try {
			for (int i = 0; i < pedido.getLineas().size(); i++) {
				pedido.getLineas().get(i).setNumLinea(i + 1);
			}

			consultarCliente(pedido.getCliente().getDni());
			session = HibernateUtil.getSessionFactoy().openSession();
			session.getTransaction().begin();
			session.persist(pedido);
			session.getTransaction().commit();
			return pedido;
		} catch (NotFoundException e) {
			session.getTransaction().rollback();
			throw new PedidosClientesServiceException("No hay cliente para el pedido " + e);
		}

	}

	@Override
	public Articulo crearArticulo(Articulo articulo) throws PedidosClientesServiceException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactoy().openSession();
			session.getTransaction().begin();
			session.persist(articulo);
			session.getTransaction().commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			e.getStackTrace();
			throw new PedidosClientesServiceException(e);

		} finally {

		}
		return articulo;
	}

	@Override
	public void actualizarCliente(Cliente cliente) throws PedidosClientesServiceException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactoy().openSession();
			session.getTransaction().begin();
			// Aqui hacemos la insercion
			session.merge(cliente);

			session.getTransaction().commit();
		} catch (Exception e) {
			session.getTransaction().rollback();
			throw new PedidosClientesServiceException(e);
		} finally {

		}

	}

	@Override
	public Cliente consultarCliente(String dni) throws NotFoundException, PedidosClientesServiceException {
		Cliente cliente = new Cliente();
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactoy().openSession();
			String sql = "Select * from cliente where dni like '" + dni + "'";
			NativeQuery<Cliente> query = session.createNativeQuery(sql, Cliente.class);
			cliente = query.getSingleResult();
			if (cliente == null) {
				throw new NotFoundException("No hay cliente con ese DNI");
			}
		} catch (NoResultException e) {
			throw new NotFoundException("No hay cliente con ese dni");
		}

		return cliente;
	}

	@Override
	public Articulo consultarArticulo(Long idArticulo) throws NotFoundException, PedidosClientesServiceException {
		Articulo articulo = new Articulo();
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactoy().openSession();
			String sql = "Select * from articulo where id = " + idArticulo;
			NativeQuery<Articulo> query = session.createNativeQuery(sql, Articulo.class);
			articulo = query.getSingleResult();
			if (articulo == null) {
				throw new NotFoundException("No hay articulo con ese id");
			}
		} catch (NoResultException e) {
			throw new NotFoundException("No hay articulo con ese id");
		}
		return articulo;
	}

	@Override
	public Pedido consultarPedido(String uuid) throws NotFoundException, PedidosClientesServiceException {
		Pedido pedido = new Pedido();
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactoy().openSession();
			String sql = "Select * from pedido where uuid_pedido like '" + uuid + "'";
			NativeQuery<Pedido> query = session.createNativeQuery(sql, Pedido.class);
			pedido = query.getSingleResult();
			if (pedido == null) {
				throw new NotFoundException("No hay pedido con ese uuid");
			}
		} catch (NoResultException e) {
			throw new NotFoundException("No hay pedido con ese id");
		} finally {

		}

		return pedido;
	}

}
